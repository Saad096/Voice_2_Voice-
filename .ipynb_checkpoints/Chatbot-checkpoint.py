{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "018e7505-4ce5-4016-bf26-7cd6de081ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import whisper  \n",
    "from gtts import gTTS\n",
    "import os\n",
    "from groq import Groq\n",
    "from tempfile import NamedTemporaryFile\n",
    "\n",
    "client = Groq(\n",
    "    api_key=\"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\",\n",
    ")\n",
    "\n",
    "import whisper\n",
    "\n",
    "model = whisper.load_model(\"base\")\n",
    "\n",
    "def speech_to_text(audio_path):\n",
    "    transcription = model.transcribe(audio_path)[\"text\"]\n",
    "    return transcription\n",
    "\n",
    "def generate_response(text):\n",
    "    chat_completion = client.chat.completions.create(\n",
    "        messages=[\n",
    "            {\n",
    "                \"role\": \"user\",\n",
    "                \"content\": text,\n",
    "            }\n",
    "        ],\n",
    "        model=\"llama3-8b-8192\",\n",
    "    )\n",
    "    return chat_completion.choices[0].message.content\n",
    "\n",
    "def text_to_speech(text):\n",
    "    tts = gTTS(text)\n",
    "    output_audio = NamedTemporaryFile(suffix=\".mp3\", delete=False)\n",
    "    tts.save(output_audio.name)\n",
    "    return output_audio.name\n",
    "\n",
    "def chatbot_pipeline(audio_path):\n",
    "    try:\n",
    "        text_input = speech_to_text(audio_path)\n",
    "\n",
    "\n",
    "        response_text = generate_response(text_input)\n",
    "\n",
    "        # Step 3: Convert response text to speech\n",
    "        response_audio_path = text_to_speech(response_text)\n",
    "\n",
    "        return response_text, response_audio_path\n",
    "\n",
    "    except Exception as e:\n",
    "        return str(e), None\n",
    "\n",
    "iface = gr.Interface(\n",
    "    fn=chatbot_pipeline,\n",
    "    inputs=gr.Audio(type=\"filepath\", label=\"Speak\"),  # Removed 'source' argument\n",
    "    outputs=[\n",
    "        gr.Textbox(label=\"Response Text\"),\n",
    "        gr.Audio(label=\"Response Audio\")\n",
    "    ],\n",
    "    title=\"Real-Time Voice-to-Voice Chatbot\"\n",
    ")\n",
    "\n",
    "iface.launch(share=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
